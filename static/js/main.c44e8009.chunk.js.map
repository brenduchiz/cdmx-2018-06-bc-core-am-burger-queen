{"version":3,"sources":["components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","collapse","onClick","bind","assertThisInitialized","setState","react_default","a","createElement","BrowserRouter","mdbreact","color","dark","expand","scrolling","href","isOpen","navbar","left","active","to","right","icon","style","height","className","React","Component","App","Navbar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAkEeA,cA5Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,UAAU,GAElBR,EAAKS,QAAUT,EAAKS,QAAQC,KAAbT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KALIA,yEAQnBG,KAAKS,SAAS,CACVJ,UAAWL,KAAKI,MAAMC,4CAKxB,OACIK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,OAAD,CAAQC,MAAM,gBAAgBC,MAAI,EAACC,OAAO,KAAKC,WAAS,GACpDR,EAAAC,EAAAC,cAACE,EAAA,YAAD,CAAaK,KAAK,KACdT,EAAAC,EAAAC,cAAA,yBAEJF,EAAAC,EAAAC,cAACE,EAAA,cAAD,CAAeR,QAASN,KAAKM,UAC7BI,EAAAC,EAAAC,cAACE,EAAA,SAAD,CAAUM,OAAWpB,KAAKI,MAAMC,SAAWgB,QAAM,GAC7CX,EAAAC,EAAAC,cAACE,EAAA,UAAD,CAAWQ,MAAI,GACbZ,EAAAC,EAAAC,cAACE,EAAA,QAAD,CAASS,QAAM,GACXb,EAAAC,EAAAC,cAACE,EAAA,QAAD,CAASU,GAAG,KAAZ,SAEJd,EAAAC,EAAAC,cAACE,EAAA,QAAD,KACIJ,EAAAC,EAAAC,cAACE,EAAA,QAAD,CAASU,GAAG,KAAZ,aAEJd,EAAAC,EAAAC,cAACE,EAAA,QAAD,KACIJ,EAAAC,EAAAC,cAACE,EAAA,QAAD,CAASU,GAAG,KAAZ,YAEJd,EAAAC,EAAAC,cAACE,EAAA,QAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,QAAD,CAASU,GAAG,KAAZ,aAGJd,EAAAC,EAAAC,cAACE,EAAA,UAAD,CAAWW,OAAK,GACdf,EAAAC,EAAAC,cAACE,EAAA,QAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,QAAD,CAASU,GAAG,KAAId,EAAAC,EAAAC,cAACE,EAAA,GAAD,CAAIY,KAAK,aAAzB,OAEFhB,EAAAC,EAAAC,cAACE,EAAA,QAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,QAAD,CAASU,GAAG,KAAId,EAAAC,EAAAC,cAACE,EAAA,GAAD,CAAIY,KAAK,cAE3BhB,EAAAC,EAAAC,cAACE,EAAA,QAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,QAAD,CAASU,GAAG,KAAId,EAAAC,EAAAC,cAACE,EAAA,GAAD,CAAIY,KAAK,oBAMzChB,EAAAC,EAAAC,cAACE,EAAA,UAAD,CAAWa,MAtCC,CAACC,OAAQ,MAsCQC,UAAU,oBACrCnB,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,6DAtDQkB,IAAMC,WCaTC,0LAXX,OAGEtB,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,OACfnB,EAAAC,EAAAC,cAACqB,EAAD,cANYF,gCCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c44e8009.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar, NavbarBrand, NavbarNav, NavbarToggler, Collapse, NavItem, NavLink, Fa, Container } from 'mdbreact';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\n\r\nclass Nav extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          collapse: false,\r\n      };\r\n  this.onClick = this.onClick.bind(this);\r\n}\r\nonClick(){\r\n  this.setState({\r\n      collapse: !this.state.collapse,\r\n    });\r\n}\r\nrender() {\r\n  const container = {height: 1300}\r\n    return (\r\n        <div>\r\n          <Router>\r\n            <Navbar color=\"default-color\" dark expand=\"md\" scrolling>\r\n                <NavbarBrand href=\"/\">\r\n                    <strong>Navbar</strong>\r\n                </NavbarBrand>\r\n                <NavbarToggler onClick={this.onClick } />\r\n                <Collapse isOpen = { this.state.collapse } navbar>\r\n                    <NavbarNav left>\r\n                      <NavItem active>\r\n                          <NavLink to=\"#\">Home</NavLink>\r\n                      </NavItem>\r\n                      <NavItem>\r\n                          <NavLink to=\"#\">Features</NavLink>\r\n                      </NavItem>\r\n                      <NavItem>\r\n                          <NavLink to=\"#\">Pricing</NavLink>\r\n                      </NavItem>\r\n                      <NavItem>\r\n                        <NavLink to=\"#\">Options</NavLink>\r\n                      </NavItem>\r\n                    </NavbarNav>\r\n                    <NavbarNav right>\r\n                      <NavItem>\r\n                        <NavLink to=\"#\"><Fa icon=\"facebook\"/>/></NavLink>\r\n                      </NavItem>\r\n                      <NavItem>\r\n                        <NavLink to=\"#\"><Fa icon=\"twitter\"/></NavLink>\r\n                      </NavItem>\r\n                      <NavItem>\r\n                        <NavLink to=\"#\"><Fa icon=\"instagram\"/></NavLink>\r\n                      </NavItem>\r\n                    </NavbarNav>\r\n                </Collapse>\r\n            </Navbar>\r\n        </Router>\r\n        <Container style={container} className=\"text-center mt-5\">\r\n          <h2>This Navbar isn't fixed</h2>\r\n          <h5>When you scroll down it will disappear</h5>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;","import React, { Component } from 'react';\n\nimport Nav from './components/Navbar';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n\n\n      <div className=\"App\">\n      <Nav/>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}